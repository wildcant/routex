generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl         = env("DIRECT_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Status {
  PENDING
  ACTIVE
}

model User {
  id        String  @id @default(dbgenerated("nanoid()")) @db.VarChar(11)
  email     String  @unique
  name      String
  role      Role    @default(USER)
  password  String
  status    Status  @default(PENDING)
  company   Company @relation(fields: [companyId], references: [id])
  companyId String  @db.VarChar(11)
}

model Company {
  id   String @id @default(dbgenerated("nanoid()")) @db.VarChar(11)
  name String @unique
  hash String @unique
  User User[]
}

model TransmissionLine {
  id    String @id @default(dbgenerated("nanoid()")) @db.VarChar(11)
  color String
  poles Pole[]
  lines Line[]
}

model Pole {
  id                 String           @id @default(dbgenerated("nanoid()")) @db.VarChar(11)
  TransmissionLine   TransmissionLine @relation(fields: [transmissionLineId], references: [id])
  transmissionLineId String           @db.VarChar(11)
  lat                Float
  lng                Float
  StartLine          Line[]           @relation(name: "start")
  EndLine            Line[]           @relation(name: "end")
}

model Line {
  id                 String           @id @default(dbgenerated("nanoid()")) @db.VarChar(11)
  start              Pole             @relation(fields: [startPoleId], references: [id], name: "start")
  end                Pole             @relation(fields: [endPoleId], references: [id], name: "end")
  TransmissionLine   TransmissionLine @relation(fields: [transmissionLineId], references: [id])
  transmissionLineId String           @db.VarChar(11)
  startPoleId        String           @db.VarChar(11)
  endPoleId          String           @db.VarChar(11)
}
