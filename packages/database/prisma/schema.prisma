generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl         = env("DIRECT_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Status {
  PENDING
  ACTIVE
}

model User {
  id                       String             @id @default(dbgenerated("nanoid()")) @db.VarChar(11)
  email                    String             @unique
  name                     String
  role                     Role               @default(USER)
  password                 String
  status                   Status             @default(PENDING)
  company                  Company            @relation(fields: [companyId], references: [id])
  companyId                String             @db.VarChar(11)
  TransmissionLinesCreated TransmissionLine[] @relation(name: "createdByUser")
  TransmissionLinesUpdated TransmissionLine[] @relation(name: "updatedByUser")
  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @updatedAt
}

model Company {
  id               String             @id @default(dbgenerated("nanoid()")) @db.VarChar(11)
  name             String             @unique
  hash             String             @unique
  User             User[]
  TransmissionLine TransmissionLine[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model TransmissionLine {
  id              String   @id @default(dbgenerated("nanoid()")) @db.VarChar(11)
  color           String
  poles           Pole[]
  lines           Line[]
  owner           Company  @relation(fields: [companyId], references: [id])
  companyId       String   @db.VarChar(11)
  createdBy       User     @relation(fields: [createdByUserId], references: [id], name: "createdByUser")
  createdByUserId String   @db.VarChar(11)
  updatedBy       User     @relation(fields: [updatedByUserId], references: [id], name: "updatedByUser")
  updatedByUserId String   @db.VarChar(11)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Pole {
  id                 String           @id @default(dbgenerated("nanoid()")) @db.VarChar(11)
  TransmissionLine   TransmissionLine @relation(fields: [transmissionLineId], references: [id])
  transmissionLineId String           @db.VarChar(11)
  lat                Float
  lng                Float
  StartLine          Line[]           @relation(name: "start")
  EndLine            Line[]           @relation(name: "end")
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

model Line {
  id                 String           @id @default(dbgenerated("nanoid()")) @db.VarChar(11)
  start              Pole             @relation(fields: [startPoleId], references: [id], name: "start")
  end                Pole             @relation(fields: [endPoleId], references: [id], name: "end")
  TransmissionLine   TransmissionLine @relation(fields: [transmissionLineId], references: [id])
  transmissionLineId String           @db.VarChar(11)
  startPoleId        String           @db.VarChar(11)
  endPoleId          String           @db.VarChar(11)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}
